#!/usr/bin/env node

const checker = require('license-checker-rseidelsohn');
const fs = require('fs');
const path = require('path');

// Read license text and truncate if needed
function readLicenseText(licenseFilePath, maxWords = 200) {
  try {
    if (!licenseFilePath || !fs.existsSync(licenseFilePath)) {
      return null;
    }
    
    const content = fs.readFileSync(licenseFilePath, 'utf8');
    const words = content.trim().split(/\s+/);
    
    if (words.length <= maxWords) {
      return content.trim();
    }
    
    return words.slice(0, maxWords).join(' ') + '\n\n[Content truncated - see full license at source]';
  } catch (error) {
    console.warn(`Warning: Could not read license file ${licenseFilePath}: ${error.message}`);
    return null;
  }
}

// Extract repository URL from various formats
function normalizeRepository(repository) {
  if (!repository) return null;
  
  if (typeof repository === 'string') {
    return repository;
  }
  
  if (repository.url) {
    // Clean up git+https:// format
    return repository.url
      .replace(/^git\+/, '')
      .replace(/\.git$/, '')
      .replace(/^ssh:\/\/git@github\.com\//, 'https://github.com/');
  }
  
  return null;
}

// Generate THIRD_PARTY_NOTICES.md
async function generateThirdPartyNotices() {
  return new Promise((resolve, reject) => {
    checker.init({
      start: '.',
      production: true,
      excludePrivatePackages: true,
    }, (err, packages) => {
      if (err) {
        reject(err);
        return;
      }

      let noticesContent = `# Third-Party Software Notices and Information

This project incorporates components from the projects listed below.

**Generated on:** ${new Date().toISOString()}  
**Total packages:** ${Object.keys(packages).length}

---

`;

      // Sort packages alphabetically
      const sortedPackages = Object.keys(packages).sort();
      
      sortedPackages.forEach((packageName) => {
        const pkg = packages[packageName];
        const license = pkg.licenses || 'UNKNOWN';
        const repository = normalizeRepository(pkg.repository);
        const licenseText = readLicenseText(pkg.licenseFile);
        
        noticesContent += `## ${packageName}\n\n`;
        noticesContent += `- **Version:** ${pkg.version || 'N/A'}\n`;
        noticesContent += `- **License:** ${license}\n`;
        
        if (repository) {
          noticesContent += `- **Repository:** ${repository}\n`;
        }
        
        if (pkg.publisher) {
          noticesContent += `- **Author:** ${pkg.publisher}\n`;
        }
        
        if (pkg.email) {
          noticesContent += `- **Email:** ${pkg.email}\n`;
        }
        
        if (pkg.url) {
          noticesContent += `- **Homepage:** ${pkg.url}\n`;
        }
        
        noticesContent += '\n';
        
        if (licenseText) {
          noticesContent += '### License Text\n\n';
          noticesContent += '```\n';
          noticesContent += licenseText;
          noticesContent += '\n```\n\n';
        } else if (repository) {
          noticesContent += `### License Text\n\nSee full license text at: ${repository}/blob/main/LICENSE\n\n`;
        }
        
        noticesContent += '---\n\n';
      });

      // Add footer
      noticesContent += `\n## Generation Information

This file was automatically generated from package dependency information.  
For the most up-to-date license information, please check the individual package repositories.

**Generated by:** Travel AutoLog SBOM and License Compliance System  
**Command:** \`node scripts/third-party-notices.cjs\`  
**Source:** package-lock.json and installed packages
`;

      // Write to file
      const outputPath = path.join(__dirname, '../licenses/THIRD_PARTY_NOTICES.md');
      fs.writeFileSync(outputPath, noticesContent, 'utf8');

      console.log(`‚úÖ Third-party notices generated successfully`);
      console.log(`üìÅ Output file: ${outputPath}`);
      console.log(`üìä Processed ${Object.keys(packages).length} packages`);

      resolve(outputPath);
    });
  });
}

// Run if called directly
if (require.main === module) {
  generateThirdPartyNotices().catch(error => {
    console.error('‚ùå Failed to generate third-party notices:', error);
    process.exit(1);
  });
}

module.exports = { generateThirdPartyNotices };